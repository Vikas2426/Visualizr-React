{"version":3,"sources":["components/v-logo.png","Redux/actions.js","Redux/constants.js","components/AlgoButtons.jsx","components/ChartDisplay.jsx","components/Code.jsx","components/CodeContainer.jsx","components/Input.jsx","components/Navbar.jsx","App.js","Redux/reducer.js","index.js"],"names":["module","exports","setProblem","text","type","payload","AlgoButtons","problem","useSelector","state","dispatch","useDispatch","handleClick","event","target","textContent","className","onClick","ChartDisplay","width","height","chartType","loader","data","options","hAxis","title","vAxis","rootProps","Code","algorithm","useEffect","Prism","highlightAll","id","getAlgoToDisplay","CodeContainer","Input","inputValue","autoComplete","autoFocus","value","onChange","preventDefault","alert","Navbar","href","src","require","alt","App","year","Date","getFullYear","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad5ce2bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/v-logo.4697a594.png\";","import { CHANGE_INPUT_VALUE, CHANGE_ALGORITHM, CHANGE_PROBLEM } from './constants.js'\n\nexport const setProblem = text => ({\n    type: CHANGE_PROBLEM,\n    payload: text\n})\n\nexport const setAlgorithm = text => ({\n    type: CHANGE_ALGORITHM,\n    payload: text\n})\n\nexport const setInputValue = input => ({\n    type: CHANGE_INPUT_VALUE,\n    payload: input\n})","export const CHANGE_PROBLEM = 'CHANGE_PROBLEM';\nexport const CHANGE_ALGORITHM = 'CHANGE_ALGORITHM';\nexport const CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE';\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setAlgorithm } from '../Redux/actions'\n\nfunction AlgoButtons() {\n\n    const problem = useSelector(state => state.problem)\n    const dispatch = useDispatch();\n    const handleClick = (event) => {\n        dispatch(setAlgorithm(event.target.textContent))\n    }\n    if (problem === \"add Numbers\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Naive</button>\n                <button onClick={handleClick}>A.P.</button>\n                <button onClick={handleClick}>Optimized A.P.</button>\n            </div>\n        )\n\n\n    if (problem === \"searching\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Linear Search</button>\n                <button onClick={handleClick}>Binary Search</button>\n            </div>\n        )\n\n    if (problem === \"sorting\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Bubble Sort</button>\n                <button onClick={handleClick}>Quick Sort</button>\n                <button onClick={handleClick}>Merge Sort</button>\n            </div>\n        )\n\n    if (problem === \"\")\n        return (\n            <div className=\"algo-btn-div\">\n                Algorithm options appear hear.\n            </div>\n        )\n}\n\nexport default AlgoButtons\n","import React from 'react'\nimport Chart from \"react-google-charts\";\n\nfunction ChartDisplay() {\n    return (\n        <div className=\"chart-container\">\n            < Chart\n                width={'100%'}\n                height={'100%'}\n                chartType=\"AreaChart\"\n                loader={<div>Loading Chart</div>}\n                data={\n                    [\n                        ['Input', 'Time'],\n                        [0, 0],\n                        [1, 10],\n                        [2, 23],\n                        [3, 17],\n                        [4, 18],\n                        [5, 9],\n                        [6, 11],\n                        [7, 27],\n                        [8, 33],\n                        [9, 40],\n                        [10, 32],\n                        [11, 35],\n                    ]}\n                // data={data}\n                options={{\n                    hAxis: {\n                        title: 'Input',\n                    },\n                    vAxis: {\n                        title: 'Execution Time',\n                    },\n                }}\n                rootProps={{ 'data-testid': '1' }}\n            />\n        </div>\n    )\n}\n\nexport default ChartDisplay\n","import React, { useEffect } from \"react\";\nimport \"./prism.css\";\nimport Prism from \"prismjs\";\nimport { useSelector } from 'react-redux';\n\nconst getAlgoToDisplay = (algorithm) => {\n\n    let algo = \"\";\n    if (algorithm === \"Naive\") {\n        algo = `function addNumber(inputValue){ \n    var sum = 0;\n    for (let i = 0; i <= inputValue; i++){\n        sum += i;\n    }\n}`\n    }\n\n    else if (algorithm === \"A.P.\") {\n        algo = `function addNumber = (inputValue) => {\n        let sum = inputValue * (inputValue - 1) / 2 ; \n      };`\n    }\n    else if (algorithm === \"Optimized A.P.\") {\n        algo = `function addNumber = (inputValue) => { \n        let sum = (inputValue / 2) * (inputValue - 1) ;\n      };` }\n    else if (algorithm === \"Linear Search\") {\n        algo = `function linearSearch(arr, key){\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] === key){\n                return i\n            }\n        }\n        return -1\n    }` }\n    else if (algorithm === \"Binary Search\") {\n        algo = `function binarySearch(sortedArray, key){\n        let start = 0;\n        let end = sortedArray.length - 1;\n    \n        while (start <= end) {\n            let middle = Math.floor((start + end) / 2);\n    \n            if (sortedArray[middle] === key) {\n                // found the key\n                return middle;\n            } else if (sortedArray[middle] < key) {\n                // continue searching to the right\n                start = middle + 1;\n            } else {\n                // search searching to the left\n                end = middle - 1;\n            }\n        }\n        // key wasn't found\n        return -1;\n    }` }\n    else if (algorithm === \"Bubble Sort\") {\n        algo = `function bubbleSort(inputArr) {\n        let n = inputArr.length;\n        \n        for(let i = 0; i < n; i++) {\n            for(let j = 0; j < n; j++) {\n                // Comparing and swapping the elements\n                if(inputArr[j] > inputArr[j+1]){\n                    let t = inputArr[j];\n                    inputArr[j] = inputArr[j+1];\n                    inputArr[j+1] = t;\n                }\n            }\n        }\n        return inputArr;\n    }` }\n    else if (algorithm === \"Quick Sort\") {\n        algo = `function partition(arr, start, end){\n        // Taking the last element as the pivot\n        const pivotValue = arr[end];\n        let pivotIndex = start; \n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            // Swapping elements\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\n            // Moving to next element\n            pivotIndex++;\n            }\n        }\n        \n        // Putting the pivot value in the middle\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \n        return pivotIndex;\n    };\n    \n    function quickSortRecursive(arr, start, end) {\n        // Base case or terminating case\n        if (start >= end) {\n            return;\n        }\n        \n        // Returns pivotIndex\n        let index = partition(arr, start, end);\n        \n        // Recursively apply the same logic to the left and right subarrays\n        quickSort(arr, start, index - 1);\n        quickSort(arr, index + 1, end);\n    }` }\n    else if (algorithm === \"Merge Sort\") {\n        algo = `function mergeSort(array) {\n        const half = array.length / 2\n        \n        // Base case or terminating case\n        if(array.length < 2){\n          return array \n        }\n        \n        const left = array.splice(0, half)\n        return merge(mergeSort(left),mergeSort(array))\n      }\n\n    function merge(left, right) {\n        let arr = []\n        // Break out of loop if any one of the array gets empty\n        while (left.length && right.length) {\n            // Pick the smaller among the smallest element of left and right sub arrays \n            if (left[0] < right[0]) {\n                arr.push(left.shift())  \n            } else {\n                arr.push(right.shift()) \n            }\n        }\n        \n        // Concatenating the leftover elements\n        // (in case we didn't go through the entire left or right array)\n        return [ ...arr, ...left, ...right ]\n    }` }\n    else { algo = \"\"; }\n\n    return algo;\n\n}\n\n\nfunction Code() {\n    const algorithm = useSelector(state => state.algorithm);\n\n    useEffect(() => {\n        Prism.highlightAll();\n    });\n\n    return (\n        <div id='algoDiv'>\n            <pre id=\"algorithm\">\n                <code className=\"language-javascript\" id='code-content'>{getAlgoToDisplay(algorithm)}</code>\n            </pre>\n        </div>\n    );\n}\n\nexport default Code;","import React from 'react'\nimport Code from './Code'\n\nfunction CodeContainer() {\n  return (\n    <div className=\"code-container\">\n      <Code />\n    </div>\n  )\n}\n\nexport default CodeContainer\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setInputValue } from '../Redux/actions.js';\n\nfunction Input() {\n    const inputValue = useSelector(state => state.inputValue);\n    const algorithm = useSelector(state => state.algorithm);\n    const dispatch = useDispatch();\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (algorithm === \"\")\n            alert(\"Please select an algorithm.\")\n    }\n    return (\n        <div className=\"form-container input-Form\">\n            <form className=\"form-inline\">\n                <input\n                    type=\"text\"\n                    className=\"form-input\" id=\"inlineFormInputName2\" autoComplete=\"off\"\n                    autoFocus\n                    value={inputValue}\n                    onChange={(event) => dispatch(setInputValue(event.target.value))}>\n\n                </input>\n                <button\n                    onClick={handleSubmit}\n                    type=\"submit\"\n                    className=\"form-btn body-btn\" id='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Input\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { setProblem } from '../Redux/actions'\n\nfunction Navbar() {\n    const dispatch = useDispatch()\n    return (\n        <nav className=\"navbar\">\n\n            <a className=\"navbar-brand\" href=\"/\"><img src={require(\"./v-logo.png\")} alt=\"logo\" />izualizr</a>\n            <div className=\"options\">\n                <button className=\"addNumbersBtn\" onClick={() => { dispatch(setProblem(\"add Numbers\")) }}>\n                    Add Upto\n        </button>\n                <button className=\"searchingBtn\" onClick={() => { dispatch(setProblem(\"searching\")) }}>\n                    Searching\n        </button>\n                <button className=\"sortingBtn\" onClick={() => { dispatch(setProblem(\"sorting\")) }}>\n                    Sorting\n        </button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport AlgoButtons from './components/AlgoButtons';\nimport ChartDisplay from './components/ChartDisplay';\nimport CodeContainer from './components/CodeContainer';\nimport Input from './components/Input';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  const year = new Date().getFullYear();\n\n  return (\n    <>\n      <div className=\"App\">\n        <Navbar />\n        <Input />\n        <AlgoButtons />\n        <div className=\"my-container\">\n          <ChartDisplay />\n          <CodeContainer />\n        </div>\n      </div>\n      <footer>Copyright @ Vikas Choubey, India, {year}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import { CHANGE_PROBLEM, CHANGE_ALGORITHM, CHANGE_INPUT_VALUE } from \"./constants\";\n\nconst initialState = {\n    problem: \"\",\n    inputValue: [],\n    algorithm: \"\"\n}\n\nexport const reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_PROBLEM:\n            return { ...state, problem: action.payload };\n        case CHANGE_ALGORITHM:\n            return { ...state, algorithm: action.payload };\n        case CHANGE_INPUT_VALUE:\n            return { ...state, inputValue: action.payload };\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport { reducer } from './Redux/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}