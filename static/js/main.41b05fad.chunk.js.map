{"version":3,"sources":["components/v-logo.png","Redux/actions.js","Redux/constants.js","components/AlgoButtons.jsx","components/ChartDisplay.jsx","components/Code.jsx","Code-Samples/CodeSamples.js","components/CodeContainer.jsx","AlgorithmExecution/addition.js","AlgorithmExecution/searching.js","components/Input.jsx","components/Navbar.jsx","App.js","Redux/reducer.js","index.js"],"names":["module","exports","setProblem","text","type","payload","setInputValue","input","AlgoButtons","problem","useSelector","state","dispatch","useDispatch","handleClick","event","target","textContent","className","onClick","ChartDisplay","data","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","animation","duration","Code","algorithm","useEffect","Prism","highlightAll","id","getAlgoToDisplay","CodeContainer","addNumber","inputValue","n1","Date","getTime","i","addNumberAP","addNumberOptimizedAP","addition","alert","linearSearch","arr","key","map","value","parseInt","length","n2","console","log","binarySearch","sortedArray","sort","start","end","middle","Math","floor","searching","num","Input","algoType","result","autoComplete","onChange","split","formatInput","placeholder","preventDefault","Navbar","href","src","require","alt","App","year","getFullYear","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41b05fad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/v-logo.4697a594.png\";","import { CHANGE_INPUT_VALUE, CHANGE_ALGORITHM, CHANGE_PROBLEM, CHANGE_DATA, CHANGE_NUM } from './constants.js'\n\nexport const setProblem = text => ({\n    type: CHANGE_PROBLEM,\n    payload: text\n})\n\nexport const setAlgorithm = text => ({\n    type: CHANGE_ALGORITHM,\n    payload: text\n})\n\nexport const setInputValue = input => ({\n    type: CHANGE_INPUT_VALUE,\n    payload: input\n})\n\nexport const setData = (input, time) => ({\n    type: CHANGE_DATA,\n    payload: [input, time]\n})\n\nexport const setNum = input => ({\n    type: CHANGE_NUM,\n    payload: input\n})","export const CHANGE_PROBLEM = 'CHANGE_PROBLEM';\nexport const CHANGE_ALGORITHM = 'CHANGE_ALGORITHM';\nexport const CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE';\nexport const CHANGE_DATA = 'CHANGE_DATA';\nexport const CHANGE_NUM = 'CHANGE_NUM';\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setAlgorithm } from '../Redux/actions'\n\nfunction AlgoButtons() {\n\n    const problem = useSelector(state => state.problem)\n    const dispatch = useDispatch();\n    const handleClick = (event) => {\n        dispatch(setAlgorithm(event.target.textContent))\n    }\n    if (problem === \"add Numbers\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Naive</button>\n                <button onClick={handleClick}>A.P.</button>\n                <button onClick={handleClick}>Optimized A.P.</button>\n            </div>\n        )\n\n\n    if (problem === \"searching\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Linear Search</button>\n                <button onClick={handleClick}>Binary Search</button>\n            </div>\n        )\n\n    if (problem === \"sorting\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Bubble Sort</button>\n                <button onClick={handleClick}>Quick Sort</button>\n                <button onClick={handleClick}>Merge Sort</button>\n            </div>\n        )\n\n    if (problem === \"\")\n        return (\n            <div className=\"algo-btn-div\">\n                Algorithm options appear hear.\n            </div>\n        )\n}\n\nexport default AlgoButtons\n","import React from 'react'\nimport Chart from \"react-google-charts\";\nimport { useSelector } from 'react-redux';\n\nfunction ChartDisplay() {\n    const data = useSelector(state => state.data);\n    return (\n        <div className=\"chart-container\">\n            < Chart\n                width={'100%'}\n                height={'100%'}\n                chartType=\"LineChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    hAxis: {\n                        title: 'Input',\n                    },\n                    vAxis: {\n                        title: 'Execution Time (ms)',\n                    },\n\n                }}\n                rootProps={{ 'data-testid': '1' }}\n                animation={{ duration: 20 }}\n            />\n        </div>\n    )\n}\n\nexport default ChartDisplay\n","import React, { useEffect } from \"react\";\nimport \"./prism.css\";\nimport Prism from \"prismjs\";\nimport { useSelector } from 'react-redux';\nimport { APAddition, BinarySearch, BubbleSort, LinearSearch, MergeSort, NaiveAddition, OptimizedAP, QuickSort } from \"../Code-Samples/CodeSamples\";\n\nconst getAlgoToDisplay = (algorithm) => {\n\n    let algo = \"\";\n    if (algorithm === \"Naive\") {\n        algo = NaiveAddition();\n    }\n\n    else if (algorithm === \"A.P.\") {\n        algo = APAddition();\n    }\n    else if (algorithm === \"Optimized A.P.\") {\n        algo = OptimizedAP();\n    }\n    else if (algorithm === \"Linear Search\") {\n        algo = LinearSearch();\n    }\n    else if (algorithm === \"Binary Search\") {\n        algo = BinarySearch();\n    }\n    else if (algorithm === \"Bubble Sort\") {\n        algo = BubbleSort();\n    }\n    else if (algorithm === \"Quick Sort\") {\n        algo = QuickSort();\n    }\n    else if (algorithm === \"Merge Sort\") {\n        algo = MergeSort()\n    }\n    else { algo = \"\"; }\n\n    return algo;\n\n}\n\n\nfunction Code() {\n    const algorithm = useSelector(state => state.algorithm);\n\n    useEffect(() => {\n        Prism.highlightAll();\n    });\n\n    return (\n        <div id='algoDiv'>\n            <pre id=\"algorithm\">\n                <code className=\"language-javascript\" id='code-content'>{getAlgoToDisplay(algorithm)}</code>\n            </pre>\n        </div>\n    );\n}\n\nexport default Code;","function NaiveAddition() {\n    return `function addNumber(inputValue){ \n        var sum = 0;\n        for (let i = 0; i <= inputValue; i++){\n            sum += i;\n        }\n    }`\n}\n\nfunction APAddition() {\n    return `function addNumber = (inputValue) => {\n        let sum = inputValue * (inputValue - 1) / 2 ; \n      };`\n}\n\nfunction OptimizedAP() {\n    return `function addNumber = (inputValue) => { \n        let sum = (inputValue / 2) * (inputValue - 1) ;\n      };`\n}\n\nfunction LinearSearch() {\n    return `function linearSearch(arr, key){\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] === key){\n                return i\n            }\n        }\n        return -1\n    }`\n}\n\nfunction BinarySearch() {\n    return `function binarySearch(sortedArray, key){\n        let start = 0;\n        let end = sortedArray.length - 1;\n    \n        while (start <= end) {\n            let middle = Math.floor((start + end) / 2);\n    \n            if (sortedArray[middle] === key) {\n                // found the key\n                return middle;\n            } else if (sortedArray[middle] < key) {\n                // continue searching to the right\n                start = middle + 1;\n            } else {\n                // search searching to the left\n                end = middle - 1;\n            }\n        }\n        // key wasn't found\n        return -1;\n    }`\n}\n\nfunction BubbleSort() {\n    return `function bubbleSort(inputArr) {\n        let n = inputArr.length;\n        \n        for(let i = 0; i < n; i++) {\n            for(let j = 0; j < n; j++) {\n                // Comparing and swapping the elements\n                if(inputArr[j] > inputArr[j+1]){\n                    let t = inputArr[j];\n                    inputArr[j] = inputArr[j+1];\n                    inputArr[j+1] = t;\n                }\n            }\n        }\n        return inputArr;\n    }`\n}\n\nfunction QuickSort() {\n    return `function partition(arr, start, end){\n        // Taking the last element as the pivot\n        const pivotValue = arr[end];\n        let pivotIndex = start; \n        for (let i = start; i < end; i++) {\n            if (arr[i] < pivotValue) {\n            // Swapping elements\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\n            // Moving to next element\n            pivotIndex++;\n            }\n        }\n        \n        // Putting the pivot value in the middle\n        [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]] \n        return pivotIndex;\n    };\n    \n    function quickSortRecursive(arr, start, end) {\n        // Base case or terminating case\n        if (start >= end) {\n            return;\n        }\n        \n        // Returns pivotIndex\n        let index = partition(arr, start, end);\n        \n        // Recursively apply the same logic to the left and right subarrays\n        quickSort(arr, start, index - 1);\n        quickSort(arr, index + 1, end);\n    }`\n}\n\nfunction MergeSort() {\n    return `function mergeSort(array) {\n        const half = array.length / 2\n        \n        // Base case or terminating case\n        if(array.length < 2){\n          return array \n        }\n        \n        const left = array.splice(0, half)\n        return merge(mergeSort(left),mergeSort(array))\n      }\n\n    function merge(left, right) {\n        let arr = []\n        // Break out of loop if any one of the array gets empty\n        while (left.length && right.length) {\n            // Pick the smaller among the smallest element of left and right sub arrays \n            if (left[0] < right[0]) {\n                arr.push(left.shift())  \n            } else {\n                arr.push(right.shift()) \n            }\n        }\n        \n        // Concatenating the leftover elements\n        // (in case we didn't go through the entire left or right array)\n        return [ ...arr, ...left, ...right ]\n    }`\n}\n\nexport { NaiveAddition, APAddition, OptimizedAP, LinearSearch, BinarySearch, BubbleSort, QuickSort, MergeSort }","import React from 'react'\nimport Code from './Code'\n\nfunction CodeContainer() {\n  return (\n    <div className=\"code-container\">\n      <Code />\n    </div>\n  )\n}\n\nexport default CodeContainer\n","const addition = (algorithm, inputValue) => {\n    switch (algorithm) {\n        case \"Naive\":\n            return addNumber(inputValue);\n        case \"A.P.\":\n            return addNumberAP(inputValue);\n        case \"Optimized A.P.\":\n            return addNumberOptimizedAP(inputValue);\n        default:\n            return alert(\"returned\");\n    }\n}\nconst addNumber = (inputValue) => {\n    let n1 = new Date().getTime();\n    for (let i = 0; i <= inputValue; i++) { }\n    let n2 = new Date().getTime();\n    return (n2 - n1);\n};\n\n\n\nconst addNumberAP = (inputValue) => {\n    let n1 = new Date().getTime();\n    //eslint-disable-next-line\n    let ans = (inputValue * (inputValue + 1)) / 2\n    let n2 = new Date().getTime();\n    return (n2 - n1);\n};\n\n\n\nconst addNumberOptimizedAP = (inputValue) => {\n    let n1 = new Date().getTime();\n    //eslint-disable-next-line\n    let ans = (inputValue / 2) * (inputValue + 1)\n    let n2 = new Date().getTime();\n    return (n2 - n1);\n};\n\n\nexport default addition;","const searching = (algorithm, inputValue, num) => {\n    switch (algorithm) {\n        case \"Linear Search\":\n            return linearSearch(inputValue, num);\n        case \"Binary Search\":\n            return binarySearch(inputValue, num);\n        default:\n            return alert(\"returned\");\n    }\n}\n\nconst linearSearch = (arr, key) => {\n    arr = arr.map(value => parseInt(value));\n    let n1 = new Date().getTime();\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === key) {\n            let n2 = new Date().getTime();\n            console.log(i)\n            return (n2 - n1);\n        }\n    }\n    let n2 = new Date().getTime();\n    return (n2 - n1);\n}\n\n\nconst binarySearch = (sortedArray, key) => {\n    sortedArray = sortedArray.map(value => parseInt(value));\n    sortedArray.sort();\n    let n1 = new Date().getTime();\n    let start = 0;\n    let end = sortedArray.length - 1;\n\n    while (start <= end) {\n        let middle = Math.floor((start + end) / 2);\n\n        if (sortedArray[middle] === key) {\n            // found the key\n            let n2 = new Date().getTime();\n            return (n2 - n1);\n        } else if (sortedArray[middle] < key) {\n            // continue searching to the right\n            start = middle + 1;\n        } else {\n            // search searching to the left\n            end = middle - 1;\n        }\n    }\n    // key wasn't found\n    let n2 = new Date().getTime();\n    return (n2 - n1);\n}\n\n\n\n\n\nexport default searching;","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setInputValue, setData, setNum } from '../Redux/actions.js';\nimport addition from '../AlgorithmExecution/addition.js';\nimport searching from '../AlgorithmExecution/searching.js';\nimport sorting from '../AlgorithmExecution/sorting.js';\n\n\nfunction Input() {\n    const algoType = useSelector(state => state.problem);\n    const inputValue = useSelector(state => state.inputValue);\n    const algorithm = useSelector(state => state.algorithm);\n    const num = useSelector(state => state.num);\n    const dispatch = useDispatch();\n    let result = 0;\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (algorithm === \"\")\n            alert(\"Please select an algorithm.\")\n        else {\n            if (algoType === \"add Numbers\") result = addition(algorithm, inputValue);\n            else if (algoType === \"searching\") result = searching(algorithm, inputValue, num);\n            // else if (algoType === \"sorting\") result = sorting(algorithm, inputValue);\n            dispatch(setData(inputValue, result));\n        }\n\n    }\n\n    const getPlaceholder = () => {\n        if (algoType === \"add Numbers\") return \"any number\";\n        if (algoType === \"searching\" || algoType === \"sorting\") return \"comma separated integer (n1,n2,n3)\";\n        return \"\";\n    }\n\n    const formatInput = (event) => {\n        if (algoType === \"add Numbers\") {\n            dispatch(setInputValue(event.target.value))\n        }\n        else if (algoType === \"searching\" || algoType === \"sorting\") {\n            let input = event.target.value.split(\",\");\n            dispatch(setInputValue(input))\n        }\n    }\n    return (\n        <div className=\"form-container input-Form\">\n            <form className=\"form-inline\">\n                <input\n                    type=\"text\"\n                    className=\"form-input\" id=\"inlineFormInputName2\" autoComplete=\"off\"\n                    value={inputValue}\n                    onChange={(event) => formatInput(event)}\n                    placeholder={getPlaceholder()}\n                >\n\n                </input>\n                {algoType === \"searching\" && <input\n                    type=\"text\"\n                    className=\"form-input num\" id=\"inlineFormInputName2\" autoComplete=\"off\"\n                    value={num}\n                    onChange={(event) => dispatch(setNum(event.target.value))}\n                    placeholder=\"search for\">\n                </input>}\n                <button\n                    onClick={handleSubmit}\n                    type=\"submit\"\n                    className=\"form-btn body-btn\" id='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Input\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { setProblem } from '../Redux/actions'\n\nfunction Navbar() {\n    const dispatch = useDispatch()\n    return (\n        <nav className=\"navbar\">\n\n            <a className=\"navbar-brand\" href=\"/\"><img src={require(\"./v-logo.png\")} alt=\"logo\" />izualizr</a>\n            <div className=\"options\">\n                <button className=\"addNumbersBtn\" onClick={() => { dispatch(setProblem(\"add Numbers\")) }}>\n                    Add Upto\n        </button>\n                <button className=\"searchingBtn\" onClick={() => { dispatch(setProblem(\"searching\")) }}>\n                    Searching\n        </button>\n                <button className=\"sortingBtn\" onClick={() => { dispatch(setProblem(\"sorting\")) }}>\n                    Sorting\n        </button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport AlgoButtons from './components/AlgoButtons';\nimport ChartDisplay from './components/ChartDisplay';\nimport CodeContainer from './components/CodeContainer';\nimport Input from './components/Input';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  const year = new Date().getFullYear();\n\n  return (\n    <>\n      <div className=\"App\">\n        <Navbar />\n        <Input />\n        <AlgoButtons />\n        <div className=\"my-container\">\n          <ChartDisplay />\n          <CodeContainer />\n        </div>\n      </div>\n      <footer>Copyright @ Vikas Choubey, India, {year}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import { CHANGE_PROBLEM, CHANGE_ALGORITHM, CHANGE_INPUT_VALUE, CHANGE_DATA, CHANGE_NUM } from \"./constants\";\n\nconst initialState = {\n    problem: \"\",\n    inputValue: [],\n    algorithm: \"\",\n    data: [[\"Input\", \"Time\"], [0, 0]],\n    num: \"\",\n}\n\nexport const reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_PROBLEM:\n            return { ...initialState, problem: action.payload };\n        case CHANGE_ALGORITHM:\n            return { ...state, algorithm: action.payload };\n        case CHANGE_INPUT_VALUE:\n            return { ...state, inputValue: action.payload };\n        case CHANGE_DATA:\n            return {\n                ...state,\n                data: [...state.data, action.payload]\n            }\n        case CHANGE_NUM:\n            return {\n                ...state,\n                num: action.payload\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport { reducer } from './Redux/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}