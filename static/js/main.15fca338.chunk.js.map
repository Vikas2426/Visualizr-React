{"version":3,"sources":["components/v-logo.png","Redux/actions.js","Redux/constants.js","components/AlgoButtons.jsx","components/ChartDisplay.jsx","components/Code.jsx","Code-Samples/CodeSamples.js","components/CodeContainer.jsx","AlgorithmExecution/addition.js","AlgorithmExecution/searching.js","AlgorithmExecution/sorting.js","components/Input.jsx","components/Navbar.jsx","components/Result.jsx","App.js","Redux/reducer.js","index.js"],"names":["module","exports","setProblem","text","type","payload","setInputValue","input","AlgoButtons","problem","useSelector","state","dispatch","useDispatch","handleClick","event","target","textContent","className","onClick","ChartDisplay","data","console","log","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","animation","duration","Code","algorithm","useEffect","Prism","highlightAll","id","getAlgoToDisplay","CodeContainer","addNumber","inputValue","n1","Date","getTime","ans","i","addNumberAP","addNumberOptimizedAP","addition","alert","linearSearch","arr","key","length","binarySearch","sortedArray","sort","start","end","middle","Math","floor","searching","num","map","value","parseInt","partition","pivotValue","pivotIndex","sorting","inputArr","n","j","t","bubbleSort","mergeSort","array","half","left","splice","right","push","shift","merge","stack","pop","quickSort","Input","algoType","result","autoComplete","onChange","split","formatInput","placeholder","preventDefault","time","answer","setResult","setData","Navbar","href","src","require","alt","Result","disabled","App","year","getFullYear","initialState","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15fca338.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/v-logo.4697a594.png\";","import { CHANGE_INPUT_VALUE, CHANGE_ALGORITHM, CHANGE_PROBLEM, CHANGE_DATA, CHANGE_NUM, CHANGE_RESULT } from './constants.js'\n\nexport const setProblem = text => ({\n    type: CHANGE_PROBLEM,\n    payload: text\n})\n\nexport const setAlgorithm = text => ({\n    type: CHANGE_ALGORITHM,\n    payload: text\n})\n\nexport const setInputValue = input => ({\n    type: CHANGE_INPUT_VALUE,\n    payload: input\n})\n\nexport const setData = (time) => ({\n    type: CHANGE_DATA,\n    payload: time\n})\n\nexport const setNum = input => ({\n    type: CHANGE_NUM,\n    payload: input\n})\n\nexport const setResult = result => ({\n    type: CHANGE_RESULT,\n    payload: result\n})","export const CHANGE_PROBLEM = 'CHANGE_PROBLEM';\nexport const CHANGE_ALGORITHM = 'CHANGE_ALGORITHM';\nexport const CHANGE_INPUT_VALUE = 'CHANGE_INPUT_VALUE';\nexport const CHANGE_DATA = 'CHANGE_DATA';\nexport const CHANGE_NUM = 'CHANGE_NUM';\nexport const CHANGE_RESULT = 'CHANGE_RESULT';\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setAlgorithm } from '../Redux/actions'\n\nfunction AlgoButtons() {\n\n    const problem = useSelector(state => state.problem)\n    const dispatch = useDispatch();\n    const handleClick = (event) => {\n        dispatch(setAlgorithm(event.target.textContent))\n    }\n    if (problem === \"add Numbers\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Naive</button>\n                <button onClick={handleClick}>A.P.</button>\n                <button onClick={handleClick}>Optimized A.P.</button>\n            </div>\n        )\n\n\n    if (problem === \"searching\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Linear Search</button>\n                <button onClick={handleClick}>Binary Search</button>\n            </div>\n        )\n\n    if (problem === \"sorting\")\n        return (\n            <div className=\"algo-btn-div\">\n                <button onClick={handleClick}>Bubble Sort</button>\n                <button onClick={handleClick}>Quick Sort</button>\n                <button onClick={handleClick}>Merge Sort</button>\n            </div>\n        )\n\n    if (problem === \"\")\n        return (\n            <div className=\"algo-btn-div\">\n                Algorithm options appear hear.\n            </div>\n        )\n}\n\nexport default AlgoButtons\n","import React from 'react'\nimport Chart from \"react-google-charts\";\nimport { useSelector } from 'react-redux';\n\nfunction ChartDisplay() {\n    const data = useSelector(state => state.data);\n    console.log(data)\n    return (\n        <div className=\"chart-container\">\n            < Chart\n                width={'100%'}\n                height={'100%'}\n                chartType=\"LineChart\"\n                loader={<div>Loading Chart</div>}\n                data={data}\n                options={{\n                    hAxis: {\n                        title: 'Input',\n                    },\n                    vAxis: {\n                        title: 'Execution Time (ms)',\n                    },\n\n                }}\n                rootProps={{ 'data-testid': '1' }}\n                animation={{ duration: 20 }}\n            />\n        </div>\n    )\n}\n\nexport default ChartDisplay\n","import React, { useEffect } from \"react\";\nimport \"./prism.css\";\nimport Prism from \"prismjs\";\nimport { useSelector } from 'react-redux';\nimport { APAddition, BinarySearch, BubbleSort, LinearSearch, MergeSort, NaiveAddition, OptimizedAP, QuickSort } from \"../Code-Samples/CodeSamples\";\n\nconst getAlgoToDisplay = (algorithm) => {\n\n    let algo = \"\";\n    if (algorithm === \"Naive\") {\n        algo = NaiveAddition();\n    }\n\n    else if (algorithm === \"A.P.\") {\n        algo = APAddition();\n    }\n    else if (algorithm === \"Optimized A.P.\") {\n        algo = OptimizedAP();\n    }\n    else if (algorithm === \"Linear Search\") {\n        algo = LinearSearch();\n    }\n    else if (algorithm === \"Binary Search\") {\n        algo = BinarySearch();\n    }\n    else if (algorithm === \"Bubble Sort\") {\n        algo = BubbleSort();\n    }\n    else if (algorithm === \"Quick Sort\") {\n        algo = QuickSort();\n    }\n    else if (algorithm === \"Merge Sort\") {\n        algo = MergeSort()\n    }\n    else { algo = \"\"; }\n\n    return algo;\n\n}\n\n\nfunction Code() {\n    const algorithm = useSelector(state => state.algorithm);\n\n    useEffect(() => {\n        Prism.highlightAll();\n    });\n\n    return (\n        <div id='algoDiv'>\n            <pre id=\"algorithm\">\n                <code className=\"language-javascript\" id='code-content'>{getAlgoToDisplay(algorithm)}</code>\n            </pre>\n        </div>\n    );\n}\n\nexport default Code;","function NaiveAddition() {\n    return `function addNumber(inputValue){ \n        var sum = 0;\n        for (let i = 0; i <= inputValue; i++){\n            sum += i;\n        }\n    }`\n}\n\nfunction APAddition() {\n    return `function addNumber = (inputValue) => {\n        let sum = inputValue * (inputValue - 1) / 2 ; \n      };`\n}\n\nfunction OptimizedAP() {\n    return `function addNumber = (inputValue) => { \n        let sum = (inputValue / 2) * (inputValue - 1) ;\n      };`\n}\n\nfunction LinearSearch() {\n    return `function linearSearch(arr, key){\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i] === key){\n                return i\n            }\n        }\n        return -1\n    }`\n}\n\nfunction BinarySearch() {\n    return `function binarySearch(sortedArray, key){\n        sortedArray.sort();\n        let start = 0;\n        let end = sortedArray.length - 1;\n    \n        while (start <= end) {\n            let middle = Math.floor((start + end) / 2);\n    \n            if (sortedArray[middle] === key) {\n                // found the key\n                return middle;\n            } else if (sortedArray[middle] < key) {\n                // continue searching to the right\n                start = middle + 1;\n            } else {\n                // search searching to the left\n                end = middle - 1;\n            }\n        }\n        // key wasn't found\n        return -1;\n    }`\n}\n\nfunction BubbleSort() {\n    return `function bubbleSort(inputArr) {\n        let n = inputArr.length;\n        \n        for(let i = 0; i < n; i++) {\n            for(let j = 0; j < n; j++) {\n                // Comparing and swapping the elements\n                if(inputArr[j] > inputArr[j+1]){\n                    let t = inputArr[j];\n                    inputArr[j] = inputArr[j+1];\n                    inputArr[j+1] = t;\n                }\n            }\n        }\n        return inputArr;\n    }`\n}\n\nfunction QuickSort() {\n    return `function quickSortIterative(arr) {\n        // Creating an array that we'll use as a stack, using the push() and pop() functions\n        stack = [];\n        \n        // Adding the entire initial array as an \"unsorted subarray\"\n        stack.push(0);\n        stack.push(arr.length - 1);\n        \n        // There isn't an explicit peek() function\n        // The loop repeats as long as we have unsorted subarrays\n        while(stack[stack.length - 1] >= 0){\n            \n            // Extracting the top unsorted subarray\n            end = stack.pop();\n            start = stack.pop();\n            \n            pivotIndex = partition(arr, start, end);\n            \n            // If there are unsorted elements to the \"left\" of the pivot,\n            // we add that subarray to the stack so we can sort it later\n            if (pivotIndex - 1 > start){\n                stack.push(start);\n                stack.push(pivotIndex - 1);\n            }\n            \n            // If there are unsorted elements to the \"right\" of the pivot,\n            // we add that subarray to the stack so we can sort it later\n            if (pivotIndex + 1 < end){\n                stack.push(pivotIndex + 1);\n                stack.push(end);\n            }\n        }\n    }`\n}\n\nfunction MergeSort() {\n    return `function mergeSort(array) {\n        const half = array.length / 2\n        \n        // Base case or terminating case\n        if(array.length < 2){\n          return array \n        }\n        \n        const left = array.splice(0, half)\n        return merge(mergeSort(left),mergeSort(array))\n      }\n\n    function merge(left, right) {\n        let arr = []\n        // Break out of loop if any one of the array gets empty\n        while (left.length && right.length) {\n            // Pick the smaller among the smallest element of left and right sub arrays \n            if (left[0] < right[0]) {\n                arr.push(left.shift())  \n            } else {\n                arr.push(right.shift()) \n            }\n        }\n        \n        // Concatenating the leftover elements\n        // (in case we didn't go through the entire left or right array)\n        return [ ...arr, ...left, ...right ]\n    }`\n}\n\nexport { NaiveAddition, APAddition, OptimizedAP, LinearSearch, BinarySearch, BubbleSort, QuickSort, MergeSort }","import React from 'react'\nimport Code from './Code'\n\nfunction CodeContainer() {\n  return (\n    <div className=\"code-container\">\n      <Code />\n    </div>\n  )\n}\n\nexport default CodeContainer\n","const addition = (algorithm, inputValue) => {\n    switch (algorithm) {\n        case \"Naive\":\n            return addNumber(inputValue);\n        case \"A.P.\":\n            return addNumberAP(inputValue);\n        case \"Optimized A.P.\":\n            return addNumberOptimizedAP(inputValue);\n        default:\n            return alert(\"returned\");\n    }\n}\nconst addNumber = (inputValue) => {\n    let n1 = new Date().getTime();\n    let ans = 0;\n    for (let i = 0; i <= inputValue; i++) {\n        ans += i;\n    }\n    let n2 = new Date().getTime();\n    return [(n2 - n1), ans];\n};\n\n\n\nconst addNumberAP = (inputValue) => {\n    let n1 = new Date().getTime();\n    //eslint-disable-next-line\n    let ans = (inputValue * (inputValue + 1)) / 2\n    let n2 = new Date().getTime();\n    return [(n2 - n1), ans];\n};\n\n\n\nconst addNumberOptimizedAP = (inputValue) => {\n    let n1 = new Date().getTime();\n    //eslint-disable-next-line\n    let ans = (inputValue / 2) * (inputValue + 1)\n    let n2 = new Date().getTime();\n    return [(n2 - n1), ans];\n};\n\n\nexport default addition;","const searching = (algorithm, inputValue, num) => {\n    inputValue = inputValue.map(value => parseInt(value));\n    num = parseInt(num)\n    switch (algorithm) {\n        case \"Linear Search\":\n            return linearSearch(inputValue, num);\n        case \"Binary Search\":\n            return binarySearch(inputValue, num);\n        default:\n            return alert(\"returned\");\n    }\n}\n\nconst linearSearch = (arr, key) => {\n    let n1 = new Date().getTime();\n    for (let i = 0; i < 100000000; i++) { }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === key) {\n            let n2 = new Date().getTime();\n            return [(n2 - n1), \"Found at \" + i];\n        }\n    }\n    let n2 = new Date().getTime();\n    return [(n2 - n1), \"not present\"];\n}\n\n\nconst binarySearch = (sortedArray, key) => {\n    sortedArray.sort();\n    let n1 = new Date().getTime();\n    for (let i = 0; i < 100000000; i++) { }\n    let start = 0;\n    let end = sortedArray.length - 1;\n\n    while (start <= end) {\n        let middle = Math.floor((start + end) / 2);\n\n        if (sortedArray[middle] === key) {\n            // found the key\n            let n2 = new Date().getTime();\n            return [(n2 - n1), \"Found at \" + middle];\n        } else if (sortedArray[middle] < key) {\n            // continue searching to the right\n            start = middle + 1;\n        } else {\n            // search searching to the left\n            end = middle - 1;\n        }\n    }\n    // key wasn't found\n    let n2 = new Date().getTime();\n    return [(n2 - n1), \"not present\"];\n}\n\n\nexport default searching;","// import { BubbleSort } from \"../Code-Samples/CodeSamples\";\n\nconst sorting = (algorithm, inputValue) => {\n    inputValue = inputValue.map(value => parseInt(value));\n    switch (algorithm) {\n        case \"Bubble Sort\":\n            return bubbleSort(inputValue);\n        case \"Merge Sort\":\n            return mergeSort(inputValue);\n        case \"Quick Sort\":\n            return quickSort(inputValue);\n        default:\n            return alert(\"returned\");\n    }\n}\nfunction bubbleSort(inputArr) {\n    let n1 = new Date().getTime();\n\n    let n = inputArr.length;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            // Comparing and swapping the elements\n            if (inputArr[j] > inputArr[j + 1]) {\n                let t = inputArr[j];\n                inputArr[j] = inputArr[j + 1];\n                inputArr[j + 1] = t;\n            }\n        }\n    }\n    let n2 = new Date().getTime();\n    return [(n2 - n1), inputArr];\n}\n\n\nfunction quickSort(arr) {\n    // Creating an array that we'll use as a stack, using the push() and pop() functions\n    let n1 = new Date().getTime();\n    let stack = [];\n\n    // Adding the entire initial array as an \"unsorted subarray\"\n    stack.push(0);\n    stack.push(arr.length - 1);\n\n    // There isn't an explicit peek() function\n    // The loop repeats as long as we have unsorted subarrays\n    while (stack[stack.length - 1] >= 0) {\n\n        // Extracting the top unsorted subarray\n        let end = stack.pop();\n        let start = stack.pop();\n\n        let pivotIndex = partition(arr, start, end);\n\n        // If there are unsorted elements to the \"left\" of the pivot,\n        // we add that subarray to the stack so we can sort it later\n        if (pivotIndex - 1 > start) {\n            stack.push(start);\n            stack.push(pivotIndex - 1);\n        }\n\n        // If there are unsorted elements to the \"right\" of the pivot,\n        // we add that subarray to the stack so we can sort it later\n        if (pivotIndex + 1 < end) {\n            stack.push(pivotIndex + 1);\n            stack.push(end);\n        }\n    }\n    let n2 = new Date().getTime();\n    return [(n2 - n1), arr];\n}\n\nfunction partition(arr, start, end) {\n    // Taking the last element as the pivot\n    const pivotValue = arr[end];\n    let pivotIndex = start;\n    for (let i = start; i < end; i++) {\n        if (arr[i] < pivotValue) {\n            // Swapping elements\n            [arr[i], arr[pivotIndex]] = [arr[pivotIndex], arr[i]];\n            // Moving to next element\n            pivotIndex++;\n        }\n    }\n\n    // Putting the pivot value in the middle\n    [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]]\n    return pivotIndex;\n};\n\n\n\nfunction mergeSort(array) {\n    const half = array.length / 2\n    // Base case or terminating case\n    if (array.length < 2) {\n        return array\n    }\n    const left = array.splice(0, half)\n    return merge(mergeSort(left), mergeSort(array))\n}\n\nfunction merge(left, right) {\n    let arr = []\n    // Break out of loop if any one of the array gets empty\n    while (left.length && right.length) {\n        // Pick the smaller among the smallest element of left and right sub arrays \n        if (left[0] < right[0]) {\n            arr.push(left.shift())\n        } else {\n            arr.push(right.shift())\n        }\n    }\n\n    // Concatenating the leftover elements\n    // (in case we didn't go through the entire left or right array)\n    return [...arr, ...left, ...right]\n}\n\n\n\n\n\n\nexport default sorting;","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setInputValue, setData, setNum, setResult } from '../Redux/actions.js';\nimport addition from '../AlgorithmExecution/addition.js';\nimport searching from '../AlgorithmExecution/searching.js';\nimport sorting from '../AlgorithmExecution/sorting.js';\n\n\nfunction Input() {\n    const algoType = useSelector(state => state.problem);\n    const inputValue = useSelector(state => state.inputValue);\n    const algorithm = useSelector(state => state.algorithm);\n    const num = useSelector(state => state.num);\n    const dispatch = useDispatch();\n    let result = 0;\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (algorithm === \"\")\n            alert(\"Please select an algorithm.\")\n        else {\n            if (algoType === \"add Numbers\") result = addition(algorithm, inputValue);\n            else if (algoType === \"searching\") result = searching(algorithm, inputValue, num);\n            else if (algoType === \"sorting\") result = sorting(algorithm, inputValue);\n\n            const [time, answer] = result;\n            dispatch(setResult(answer));\n            dispatch(setData(time));\n        }\n\n    }\n\n    const getPlaceholder = () => {\n        if (algoType === \"add Numbers\") return \"any number\";\n        if (algoType === \"searching\" || algoType === \"sorting\") return \"comma separated integer (n1,n2,n3)\";\n        return \"\";\n    }\n\n    const formatInput = (event) => {\n        if (algoType === \"add Numbers\") {\n            dispatch(setInputValue(event.target.value))\n        }\n        else if (algoType === \"searching\" || algoType === \"sorting\") {\n            let input = event.target.value.split(\",\");\n            dispatch(setInputValue(input))\n        }\n    }\n    return (\n        <div className=\"form-container input-Form\">\n            <form className=\"form-inline\">\n                <input\n                    type=\"text\"\n                    className=\"form-input\" id=\"inlineFormInputName2\" autoComplete=\"off\"\n                    value={inputValue}\n                    onChange={(event) => formatInput(event)}\n                    placeholder={getPlaceholder()}\n                >\n\n                </input>\n                {algoType === \"searching\" && <input\n                    type=\"text\"\n                    className=\"form-input num\" id=\"inlineFormInputName2\" autoComplete=\"off\"\n                    value={num}\n                    onChange={(event) => dispatch(setNum(event.target.value))}\n                    placeholder=\"search for\">\n                </input>}\n                <button\n                    onClick={handleSubmit}\n                    type=\"submit\"\n                    className=\"form-btn body-btn\" id='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Input\n","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { setProblem } from '../Redux/actions'\n\nfunction Navbar() {\n    const dispatch = useDispatch()\n    return (\n        <nav className=\"navbar\">\n\n            <a className=\"navbar-brand\" href=\"https://vikas2426.github.io/Visualizr-React/\"><img src={require(\"./v-logo.png\")} alt=\"logo\" />izualizr</a>\n            <div className=\"options\">\n                <button className=\"addNumbersBtn\" onClick={() => { dispatch(setProblem(\"add Numbers\")) }}>\n                    Add Upto\n        </button>\n                <button className=\"searchingBtn\" onClick={() => { dispatch(setProblem(\"searching\")) }}>\n                    Searching\n        </button>\n                <button className=\"sortingBtn\" onClick={() => { dispatch(setProblem(\"sorting\")) }}>\n                    Sorting\n        </button>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","import React from 'react'\nimport { useSelector } from 'react-redux';\n\n\nfunction Result() {\n    const result = useSelector(state => state.result)\n    return (\n        <div className=\"result\">\n            <button disabled>Result</button>\n            <button disabled>{result}</button>\n        </div>\n    )\n}\n\nexport default Result\n","import React from 'react';\nimport './App.css';\nimport AlgoButtons from './components/AlgoButtons';\nimport ChartDisplay from './components/ChartDisplay';\nimport CodeContainer from './components/CodeContainer';\nimport Input from './components/Input';\nimport Navbar from './components/Navbar';\nimport Result from './components/Result';\n\nfunction App() {\n  const year = new Date().getFullYear();\n\n  return (\n    <>\n      <div className=\"App\">\n        <Navbar />\n        <Input />\n        <Result />\n        <AlgoButtons />\n        <div className=\"my-container\">\n          <ChartDisplay />\n          <CodeContainer />\n        </div>\n      </div>\n      <footer>Copyright @ Vikas Choubey, India, {year}</footer>\n    </>\n  );\n}\n\nexport default App;\n","import { CHANGE_PROBLEM, CHANGE_ALGORITHM, CHANGE_INPUT_VALUE, CHANGE_DATA, CHANGE_NUM, CHANGE_RESULT } from \"./constants\";\n\nconst initialState = {\n    problem: \"\",\n    inputValue: [],\n    algorithm: \"\",\n    data: [[\"Input\", \"Time\"], [0, 0]],\n    num: \"\",\n    result: \"\"\n}\n\nlet i = 0;\n\nexport const reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_PROBLEM:\n            return { ...initialState, problem: action.payload };\n        case CHANGE_ALGORITHM:\n            return { ...state, algorithm: action.payload };\n        case CHANGE_INPUT_VALUE:\n            return { ...state, inputValue: action.payload };\n        case CHANGE_DATA:\n            return {\n                ...state,\n                data: [...state.data, [i++, action.payload]]\n            }\n        case CHANGE_NUM:\n            return {\n                ...state,\n                num: action.payload\n            }\n        case CHANGE_RESULT:\n            return {\n                ...state,\n                result: action.payload\n            }\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider} from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport { reducer } from './Redux/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}